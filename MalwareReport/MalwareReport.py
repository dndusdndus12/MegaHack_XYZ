import requests
import json
from fpdf import FPDF
import os
from PIL import Image



class MalwareReportPDFCompact(FPDF):

    def header(self):
        self.set_font('Arial', 'B', 14)
        self.cell(0, 10, 'Malware Analysis Report', 0, 1, 'C')

    def chapter_title(self, title):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, ' - ' + title, 0, 1)  # Using an asterisk (-) as a bullet point
        self.line(10, self.get_y(), 200, self.get_y())  # Drawing a line after the title

    def chapter_body(self, body):
        self.set_font('Arial', '', 12)
        self.multi_cell(0, 8, body)  # Reduced line height to lessen distance between sentences
        self.ln(2)  # Reduced space after a paragraph
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C')



def virusTotalAPICall(filehash):
    url = f"https://www.virustotal.com/api/v3/files/{filehash}"

    headers = {
        "accept": "application/json",
        "x-apikey": "fa4d828861356b0f423fd6f46ecd1fdf0d430781e708296c6d92125c68d335f1"
    }

    response = requests.get(url, headers=headers)
    json_data = json.loads(response.text)
    return json_data

# function to add data to pdf
def add_to_pdf(d, level=0):
    for key, value in d.items():
        if isinstance(value, dict):
            pdf.chapter_title(key.capitalize())
            add_to_pdf(value, level + 1)
        elif isinstance(value, list):
            pdf.chapter_title(key.capitalize())
            for item in value:
                if isinstance(item, dict):
                    add_to_pdf(item, level + 1)
                else:
                    pdf.chapter_body("- " + str(item))
        else:
            if level == 0:  # Top level
                pdf.chapter_title(key.capitalize())
                pdf.chapter_body(str(value))
            else:
                pdf.chapter_body(str(key.capitalize()) + ": " + str(value))

# Create a new PDF instance for the compact malware report
pdf = MalwareReportPDFCompact()

# Add a page
pdf.add_page()

# Adding Header
pdf.image("./pdfImages/MegaHack-HERO.jpg", 35, 0, 150)
pdf.ln(27)
pdf.set_text_color(0, 0, 0)  # Set color to green
pdf.cell(200, 0, txt = "Malware Analysis Report", ln = True, align = 'C')
pdf.set_text_color(0, 0, 0)

# Adding CBA
pdf.set_y(100)
pdf.set_font('Arial', 'B', 12)
pdf.set_text_color(255, 0, 0)
pdf.cell(200, 0, txt = "Code Block Analysis", ln = 0, align = 'L')
pdf.set_text_color(0, 0, 0)

pdf.set_draw_color(0, 0, 0) #black line
y = 64
pdf.line(10, y,200 ,y)

imagePath = './pdfImages/image.png'
cover = Image.open(imagePath)
width, height = cover.size
width, height = float(width * 0.164583), float(height * 0.164583)
pdf.image(imagePath, 150, 95, width, height)

imagePath = './pdfImages/CBA coded.png'
cover = Image.open(imagePath)
width, height = cover.size
width, height = float(width * 0.1), float(height * 0.1)
pdf.image(imagePath, 100, 65, width, height)
pdf.ln(50)


pdf.line(10, pdf.get_y(), 200, pdf.get_y())


fileHash = '9d3fe04d88c401178165f7fbdf307ac0fb690cc5fef8b70ee7f380307d4748f8'
data = virusTotalAPICall(filehash=fileHash)
# Process the data
add_to_pdf(data)

# Save the compact malware report PDF to a file
malware_report_pdf_compact_path = 'malware_report.pdf'
pdf.output(malware_report_pdf_compact_path)